{"version":3,"sources":["components/AddForm/AddForm.module.css","components/Todo.js","components/TodoList/TodoList.js","components/AddForm/AddForm.js","App.js","serviceWorker.js","index.js","components/TodoList/TodoList.module.css"],"names":["module","exports","Todo","item","checkedItem","updateItem","deleteItem","value","isChecked","type","onChange","e","target","id","text","style","textDecoration","className","classes","faicons","icon","onClick","TodoList","props","todoItems","items","map","key","duration","easing","library","add","faTrash","AddForm","handleAddItem","preventDefault","newItem","state","currentItem","newItems","setState","handleUpdateItem","handleCheckedItem","updatedItems","handleInput","bind","handleDeleteItem","this","Date","now","filteredItems","filter","TodoForm","onSubmit","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.760c052f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoForm\":\"AddForm_TodoForm__vRoXk\"};","import React from 'react'\nimport classes from './TodoList/TodoList.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction Todo({ item, checkedItem, updateItem, deleteItem }) {\n  // console.log(item.isChecked)\n  return (\n    <p>\n      <input\n        value={item.isChecked}\n        type=\"checkbox\"\n        onChange={(e) => checkedItem(e.target.value, item.id)}\n      />\n      <input\n        type=\"text\"\n        value={item.text} id={item.id}\n        onChange={(e) => updateItem(e.target.value, item.id)}\n        style={{ textDecoration: item.isChecked ? 'line-through' : null }} />\n      <span>\n        <FontAwesomeIcon className={classes.faicons} icon=\"trash\"\n          onClick={() => deleteItem(item.id)} />\n      </span>\n    </p>\n  )\n}\n\nexport default Todo;","import React from 'react';\nimport classes from './TodoList.module.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move'\nimport Todo from '../Todo'\n\n\n\nexport default function TodoList(props) {\n  const items = props.items\n  // const checked = props.checked\n  // console.log(`TodoList: ${items.currentItem.isChecked}`)\n  const todoItems = items.map(item => {\n\n    return <div className={classes.TodoList} key={item.id}>\n\n      <Todo item={item} updateItem={props.updateItem} checkedItem={props.checkedItem} deleteItem={props.deleteItem} />\n      {/* <p>\n        <input\n          type=\"checkbox\"\n          onClick={() => props.checkedItem(item.id)}\n        />\n        <input\n          type=\"text\"\n          value={item.text} id={item.id}\n          onChange={(e) => props.updateItem(e.target.value, item.id)}\n          style={{ textDecoration: item.isChecked ? 'line-through' : null }} />\n        <span>\n          <FontAwesomeIcon className={classes.faicons} icon=\"trash\"\n            onClick={() => props.deleteItem(item.id)} />\n        </span>\n      </p> */}\n\n    </div>\n  })\n  return (\n    <div>\n      {/* for animation. install and import react-flip-move */}\n      <FlipMove duration={300} easing=\"ease-in-out\" >\n        {todoItems}\n      </FlipMove>\n\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport classes from './AddForm.module.css'\nimport TodoList from '../TodoList/TodoList'\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass AddForm extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        id: \"\",\n        isChecked: false\n      }\n\n    }\n    //if the function has ES6 arrow function syntax, you don't need this step like handleAddItem\n    this.handleInput = this.handleInput.bind(this)\n    this.handleDeleteItem = this.handleDeleteItem.bind(this)\n\n  }\n\n  handleInput(e) {\n\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        id: Date.now()\n\n\n      }\n    })\n  }\n\n  handleAddItem = (e) => {\n\n    e.preventDefault();\n    const newItem = this.state.currentItem\n\n    if (newItem !== \"\") {\n      const newItems = [...this.state.items, newItem]\n\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          id: ''\n        }\n      })\n\n    }\n  }\n\n  handleDeleteItem(id) {\n    const filteredItems = this.state.items.filter(item => id !== item.id)\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  handleUpdateItem = (text, id) => {\n    const items = this.state.items\n    items.map(item => {\n      if (item.id === id) {\n        item.text = text\n      }\n      return items\n    })\n    this.setState({\n      items: items\n\n    })\n\n  }\n\n  handleCheckedItem = (value, id) => {\n    const items = this.state.items\n\n    // (item.id === id ? { ...item, isChecked: !item.isChecked } : item)) ---- Destructuring the item object and insert \n    // isChecked property with the negative value of item.isChecked initialized value and assigning it to new item object.\n\n    const updatedItems = items.map(item => (item.id === id ? { ...item, isChecked: !item.isChecked } : item))\n\n    this.setState({\n      items: updatedItems\n\n    })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <header>\n          <form className={classes.TodoForm} onSubmit={this.handleAddItem} >\n            <input type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text} onChange={this.handleInput} />\n            <button type=\"submit\">Add</button>\n          </form>\n\n        </header>\n        <TodoList items={this.state.items} deleteItem={this.handleDeleteItem} updateItem={this.handleUpdateItem} checkedItem={this.handleCheckedItem} />\n\n\n      </div >\n    )\n  }\n}\nexport default AddForm\n\n","import React from 'react';\nimport './App.css';\nimport AddForm from './components/AddForm/AddForm'\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\" >\n      <AddForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__10qjJ\",\"faicons\":\"TodoList_faicons__sW9rh\"};"],"sourceRoot":""}